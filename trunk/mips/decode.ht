#include "types.ht"
& d_fifo_type  =type [[bool, reg_type]]
& func_type    =type [0..63]
& op_type      =type [0..63]
& aluctrl_type =type [0..7]

& ctrl : proc (op      ?var op_type &
               Func    ?var func_type &
               RegWrite!var USint1 & 
               MemToReg!var USint1 &
               MemWrite!var USint1 &
               ALUCtrl !var aluctrl_type &
               AluSrcIm!var USint1 &
               RegDstRd!var USint1 &
               Branch  !var USint1 &
               Jump    !var USint1) .
begin
& AluOp : var [0..3]
| 
   [[RegWrite,RegDstRd,AluSrcIm,Branch,MemWrite,MemToReg,Jump,AluOp]] :=
      case op 
        is MIPS_OP_RTYPE     then [[1,1,0,0,0,0,0,2]] 
        or MIPS_OP_LW        then [[1,0,1,0,0,1,0,0]] 
        or MIPS_OP_SW        then [[0,0,1,0,1,0,0,0]] 
        or MIPS_OP_BEQ       then [[0,0,0,1,0,0,0,1]] 
        or MIPS_OP_BNE       then [[0,0,0,1,0,0,0,1]] 
        or MIPS_OP_BLTZ_BGEZ then [[0,0,0,1,0,0,0,1]] 
        or MIPS_OP_BLEZ      then [[0,0,0,1,0,0,0,1]] 
        or MIPS_OP_BGTZ      then [[0,0,0,1,0,0,0,1]]    
        or MIPS_OP_ADDI      then [[1,0,1,0,0,0,0,0]] 
        or MIPS_OP_J         then [[0,0,0,0,0,0,1,0]] 
        else [[0,0,0,0,0,0,0,0]]
      si;
    
   ALUCtrl := 
      case AluOp
        is 0b00 then ALU_CTRL_ADD
        or 0b01 then ALU_CTRL_SUB
        else case Func           // RTYPE
          is 0b100000 then ALU_CTRL_ADD
          or 0b100010 then ALU_CTRL_SUB
          or 0b100100 then ALU_CTRL_AND
          or 0b100101 then ALU_CTRL_OR
          or 0b101010 then ALU_CTRL_SLT
          else 0b000
          si
       si
end // ctrl
   
// remove first inserted 
& popOutstanding : proc (WaitReg0, WaitReg1, WaitReg2:var d_fifo_type) .
begin
& EMPTY_BUG : chan bool
| 
   // delete the last entry
   if WaitReg2.1 then
      WaitReg2 := [[false,0]]
   or WaitReg1.1 then
      WaitReg1 := [[false,0]]
   or WaitReg0.1 then
      WaitReg0 := [[false,0]]
   else
      EMPTY_BUG!true
   fi      
end // popOutstanding

// push into 0
& pushOutstanding : proc (WaitReg0:var d_fifo_type &
                          WaitReg1:var d_fifo_type & 
                          WaitReg2:var d_fifo_type &
                          RegDstRd?var USint1 &
                          Rt, Rd? var reg_type  ) .
begin
& FULL_BUG : chan bool
& Reg : var reg_type
| 
   
   Reg := if boolvec(RegDstRd).0 then Rd else Rt fi;
   // place the new entry to WaitReg0 pushing up the rest
   if WaitReg2.1 then
      FULL_BUG!false
   or WaitReg1.1 then
      WaitReg2 := WaitReg1;
      WaitReg1 := WaitReg0;
      WaitReg0 := [[true, Reg]]
   or WaitReg0.1 then
      WaitReg1 := WaitReg0;
      WaitReg0 := [[true, Reg]]
   else
      WaitReg0 := [[true, Reg]]
   fi
end // popOutstanding

& decode : proc(f2d?chan f2d_type & 
                m2d?chan m2d_type & 
                w2d?chan w2d_type &
                d2f!chan d2f_type & 
                d2e!chan d2e_type) . 
begin
// Control Signals
& RegWrite : var USint1 ff
& MemToReg : var USint1 ff
& MemWrite : var USint1 ff
& AluSrcIm : var USint1 ff
& RegDstRd : var USint1 ff
& PosBranch: var USint1 ff
& Jump     : var USint1 ff
& ALUCtrl  : var aluctrl_type
// Instruction fields
& Op       : var op_type  ff
& Func     : var func_type
& Rs       : var reg_type ff 
& Rt       : var reg_type ff
& Rd       : var reg_type ff
// Others
& Result_W   : var data_type
& WriteReg_W : var reg_type
& RegWrite_W : var USint1
& PCPlus4_F  : var addr_type ff
& Inst_F     : var data_type
& SignImmX4  : var addr_type ff
& NextPC     : var addr_type ff
& SignImm    : var addr_type ff
// Out to Exe
& SrcA       : var data_type ff
& SrcB       : var data_type ff
// Count outstanding data in pipe
& OutInPipe : var USint4 ff := 0
// Register File
& RF : ramreg array [0..31] of data_type := 
  [0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,
   17,18,19,20,21,22,23,24,25,26,27,28,29,30,31]
// track outstanding register numbers to be updated in a cyclic fifo
& WaitReg0 : var d_fifo_type ff := [[false,0]]
& WaitReg1 : var d_fifo_type ff := [[false,0]]
& WaitReg2 : var d_fifo_type ff := [[false,0]]
& Stall    : var bool        ff := false // flags if stalled on branch
& Branch   : var USint4      ff := 0  // the actual branch command to Fetch
& RsD      : var data_type
& RtD      : var data_type   ff := 0

// Check if one of the current branch registers is outstanding
// result is in the 
& isOutstanding : func() : bool . 
      if (Op = MIPS_OP_BNE) + (Op = MIPS_OP_BEQ) then
         WaitReg0.1 * ( (WaitReg0.0 = Rs) + (WaitReg0.0 = Rt) ) + 
         WaitReg1.1 * ( (WaitReg1.0 = Rs) + (WaitReg1.0 = Rt) ) +
         WaitReg2.1 * ( (WaitReg2.0 = Rs) + (WaitReg2.0 = Rt) )
      or (Op = MIPS_OP_BLTZ_BGEZ)+(Op = MIPS_OP_BGTZ)+(Op = MIPS_OP_BLEZ) then
         WaitReg0.1 * (WaitReg0.0 = Rs) +
         WaitReg1.1 * (WaitReg1.0 = Rs) +
         WaitReg2.1 * (WaitReg2.0 = Rs)
      else
         false
      fi
// isOutstanding

// return true if can take the branch
& takeBranch : func () : USint1 .
   case Op 
      is MIPS_OP_BNE       then RsD <> RtD 
      or MIPS_OP_BEQ       then RsD = RtD 
      or MIPS_OP_BLTZ_BGEZ then boolvec(Rt).0 # sign(RsD)
      or MIPS_OP_BLEZ      then sign(RsD)
      or MIPS_OP_BGTZ      then RsD > 0
      else false
   si cast USint1
// takeBranch

//For debug only
//& Stage    : var [0..15]   ff := 0
|
   forever do
      sel outprobe(w2d) then
         // Stage := 1;
         w2d?[[Result_W, WriteReg_W, RegWrite_W]];
         (OutInPipe := (OutInPipe - 1) fit USint4) ||
         if boolvec(RegWrite_W).0 then 
            // Stage := 2;
            RF[WriteReg_W] := Result_W
         fi ||
         popOutstanding(WaitReg0, WaitReg1, WaitReg2)
      or -Stall * probe(f2d) * (OutInPipe < 3) then
         f2d?[[Inst_F, PCPlus4_F]];
         // Stage := 3;
         [[Rs, Rt, Rd]] := 
          bitvec(Inst_F).11..25 cast [[reg_type,reg_type,reg_type]] ||
         Op :=  bitvec(Inst_F).26..31 cast op_type ||
         Func := bitvec(Inst_F).0..5 cast func_type ||
         SignImmX4 := 
           if boolvec(Inst_F).15
               then [[0b11111111111111, bitvec(Inst_F).0..15,0,0]] 
               else [[0b00000000000000, bitvec(Inst_F).0..15,0,0]] fi cast addr_type ||
         SignImm := 
            if boolvec(Inst_F).15
               then [[0b1111111111111111, bitvec(Inst_F).0..15]] 
               else [[0b0000000000000000, bitvec(Inst_F).0..15]] fi cast addr_type ;

         // decode the instruction
         ctrl(Op, Func, RegWrite, MemToReg, MemWrite, ALUCtrl, AluSrcIm, 
              RegDstRd, PosBranch, Jump);

         // update outstanding registers
         pushOutstanding(WaitReg0, WaitReg1, WaitReg2, 
                        if boolvec(RegWrite).0 then RegDstRd else 0 fi, 
                        if boolvec(RegWrite).0 then Rt else 0 fi, 
                        if boolvec(RegWrite).0 then Rd else 0 fi) ||

         // TODO: we should have used PC MSB for the MSB of Next in case of
         // J-Type address
         if boolvec(Jump).0 then NextPC := SignImmX4 fi ||

         // So we do not accept more fetches
         OutInPipe := (OutInPipe + 1) fit USint4 ||

         // flag we have a command in flight
         Stall := true

         // Stage := 4;
      les;

      // this section is re-evaluated every time we get a new command or
      // write-back
      if Stall then
         // Stage := 5;

         // if we had a branch or other specific commands we may be stalling
         Stall := isOutstanding();
         if boolvec(PosBranch).0 then 
            // Stage := 6;

            if -Stall then
               if (Op = MIPS_OP_BNE) + (Op = MIPS_OP_BEQ) then
                  RtD := RF[Rt]
               fi;
               // Stage := 7;
               RsD := RF[Rs];
               Branch := takeBranch(); 
               // Stage := 8;
               if boolvec(Branch).0 then 
                  NextPC := (PCPlus4_F + SignImmX4) fit addr_type
               fi
            fi
         else 
            Branch := 0
         fi;

         if -Stall then
            SrcA := RF[Rs];
            SrcB := RF[Rt];
            d2f![[(boolvec(Branch).0 + boolvec(Jump).0) cast USint1, 
                  NextPC]] ||
            d2e![[SrcA, SrcB, Rs, Rt, Rd, SignImm, RegWrite, MemToReg, 
                  MemWrite, ALUCtrl, AluSrcIm, RegDstRd]]
         fi

      fi

   od
end
