//
//  This is the MPIS top level.
//  The API is all wired and interfaces to 
//  Instruction Memory - IM_VALID, IM_DATA[32], IM_ADDR[32], IM_CLK
//  Data Memory - DM_CLK, DM_WE, DM_VALID, DM_RD_DATA[32], DM_WR_DATA[32]
//

#include "types.ht"
#include "fetch.ht"
#include "decode.ht"
#include "execute.ht"
#include "memory.ht"
#include "writeback.ht"

& fetch : proc(d2f?chan d2f_type & f2d!chan f2d_type &
               IM_CLK!wire bool & 
               IM_ADDR!wire addr_type & 
               IM_DATA?wire data_type &
	       IM_VALID?wire bool ) . import

& decode : proc(f2d?chan f2d_type & m2d?chan m2d_type & w2d?chan w2d_type &
                d2f!chan d2f_type & d2e!chan d2e_type) . import

& execute : proc(d2e?chan d2e_type & m2e?chan m2e_type &
                 e2m!chan e2m_type) . import

& memory : proc(e2m?chan e2m_type & m2w!chan m2w_type &
                m2d!chan m2d_type & m2e!chan m2e_type &
                DM_CLK!wire bool &           
                DM_WE!wire bool &           
                DM_ADDR!wire addr_type &    
                DM_WR_DATA!wire data_type & 
                DM_RD_DATA?wire data_type &
		DM_RD_VALID?wire bool) . import

& writeback : proc(m2w?chan m2w_type & w2d!chan w2d_type &
                   w2e!chan w2e_type) . import

& mips : main proc(IM_CLK!wire bool &          // read inst mem on that clk
                   IM_ADDR!wire addr_type &    // inst mem address 
                   IM_DATA?wire data_type &    // inst mem data 
		   IM_VALID?wire bool &        // inst mem data valid 
                   DM_CLK!wire bool &          // data mem clk
                   DM_WE!wire bool &           // data mem write enable
                   DM_ADDR!wire addr_type &    // data mem address  
                   DM_WR_DATA!wire data_type & // data mem write data
                   DM_RD_DATA?wire data_type & // data mem read data
                   DM_RD_VALID?wire bool       // data mem read data valid
                   ) . 
begin
// channels between the modules
& f2d : chan f2d_type 
& d2f : chan d2f_type 
& d2e : chan d2e_type
& e2m : chan e2m_type
& m2d : chan m2d_type
& m2e : chan m2e_type 
& m2w : chan m2w_type 
& w2d : chan w2d_type
& w2e : chan w2e_type
|
  // top level connectivity...
  fetch(d2f, f2d, IM_CLK, IM_ADDR, IM_DATA, IM_VALID) ||
  decode(f2d, m2d, w2d, d2f, d2e) ||
  execute(d2e, m2e, e2m) || 
  memory(e2m, m2w, m2d, m2e, 
         DM_CLK, DM_WE, DM_ADDR, DM_WR_DATA, DM_RD_DATA, DM_RD_VALID) ||
  writeback(m2w, w2d, w2e)

end
