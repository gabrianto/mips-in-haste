#include "types.ht"

& memory : proc(e2m?chan e2m_type & 
                m2w!chan m2w_type &
                MM_CLK?wire USint1 &           
                MM_WE!wire USint1 &           
                MM_ADDR!wire addr_type &    
                MM_WR_DATA!wire data_type ) .
begin
// output signals - needs a shadow register internally
& mm_we      : var USint1      ff := 0
& mm_addr    : var addr_type ff := 0
& mm_wr_data : var data_type ff := 0
& MM_WE      : wire USint1      := mm_we
& MM_ADDR    : wire addr_type := mm_addr
& MM_WR_DATA : wire data_type := mm_wr_data
& e2m_ALUOut : var addr_type ff := 0 
& e2m_WriteData: var data_type ff := 0 
& e2m_WriteReg: var reg_type ff := 0
& e2m_RegWrite: var USint1 ff := 0 
& e2m_MemToReg: var USint1 ff := 0 
& e2m_MemWrite: var USint1 ff := 0
|
   forever do
      e2m?[[e2m_ALUOut, e2m_WriteData, e2m_WriteReg, e2m_RegWrite, e2m_MemToReg, e2m_MemWrite]]; 
      negedge(MM_CLK);
      mm_we := e2m_MemWrite ||
      mm_addr := e2m_ALUOut ||
      mm_wr_data := e2m_WriteData;
      posedge(MM_CLK);
      // kill writes unless a new cmd comes in; 
      // Should actually wait for next negedge. will use probe in real top level
      mm_we := 0; 
      m2w![[e2m_ALUOut cast data_type, e2m_WriteReg, e2m_RegWrite, e2m_MemToReg]]
   od
end
